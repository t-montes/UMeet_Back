{
	"info": {
		"_postman_id": "35006f3d-df93-4eb2-a5db-2a7b7ed88637",
		"name": "Settings",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19767625",
		"_collection_link": "https://solar-spaceship-244943.postman.co/workspace/aaa~ed20b85b-f663-45c4-851e-143e241a0f31/collection/19767625-35006f3d-df93-4eb2-a5db-2a7b7ed88637?action=share&source=collection_link&creator=19767625"
	},
	"item": [
		{
			"name": "API login user read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json().token;\r",
							"pm.globals.set(\"tokenRead\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"settingsRead\",\r\n    \"password\": \"read\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/people/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"people",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "API login user write",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json().token;\r",
							"pm.globals.set(\"tokenWrite\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"settingsWrite\",\r\n    \"password\": \"write\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/people/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"people",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "API login user delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json().token;\r",
							"pm.globals.set(\"tokenDelete\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"settingsDelete\",\r\n    \"password\": \"delete\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/people/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"people",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "API login user all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json().token;\r",
							"pm.globals.set(\"tokenUserAdmin\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"userAll\",\r\n    \"password\": \"admin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/people/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"people",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un user valido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must have an ID and settings ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.nested.property('settings.id');",
							"    pm.globals.set(\"userId\", jsonData.id);",
							"    pm.globals.set(\"settingsId\", jsonData.settings.id);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUserAdmin}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Nombre del usuario\",\n  \"login\": \"loginUsuario\",\n  \"email\": \"usuario@example.com\",\n  \"password\": \"Password123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar los settings de un usuario válido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenWrite}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"startHour\": 10,\n  \"endHour\": 12\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/settings/{{settingsId}}/user/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"{{settingsId}}",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar los settings de un usuario válido con valores inválidos (1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 and User not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Start hour must be less than end hour\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenWrite}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"startHour\": 16,\n  \"endHour\": 12\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/settings/{{settingsId}}/user/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"{{settingsId}}",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar los settings de un usuario válido con valores inválidos (2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 and User not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"End hour must be between 1 and 24\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenWrite}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"startHour\": 3,\n  \"endHour\": 27\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/settings/{{settingsId}}/user/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"{{settingsId}}",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar los settings de un usuario válido Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 and User not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"User mismatch\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenWrite}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"startHour\": 10,\n  \"endHour\": 12\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/settings/{{settingsId}}/user/{{wrongId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"{{settingsId}}",
						"user",
						"{{wrongId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener settings por user ID válido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenRead}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/settings/user/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener settings por user ID inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 and User not found\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Settings not found for the user\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenRead}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/settings/user/{{wrongId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"user",
						"{{wrongId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener settings inexistentes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The settings with the given id was not found\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"The settings with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenRead}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/settings/{{wrongId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"settings",
						"{{wrongId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{tokenUserAdmin}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}